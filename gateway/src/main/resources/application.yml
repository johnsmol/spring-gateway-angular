server:
  port: 8000

spring:
  security:
    oauth2:
      client:
        registration:
          gateway-client:
            provider: spring-auth-server
            client-id: gateway
            client-secret: secret
            authorization-grant-type: authorization_code
            scope: openid,offline_access
        provider:
          spring-auth-server:
            issuer-uri: ${GATEWAY_AUTHSERVER_ISSUER_URI:http://authserver:9000}
#            issuer-uri: ${GATEWAY_AUTHSERVER_ISSUER_URI}
  cloud:
    gateway:
      globalcors:
        cors-configurations:
          '[/**]':
            allowedOriginPatterns: http://frontend:[*],http://gateway:[*]
            allowedHeaders: "*"
            allowedMethods: "*"
            allowCredentials: true
      routes:
        - id: get_demo
          uri: ${GATEWAY_RESOURCE_URI:http://localhost:8080}
          predicates:
            - Method=GET
            - Path=/get
          filters:
            - TokenRelay=
            - SaveSession
        - id: post_demo
          uri: ${GATEWAY_RESOURCE_URI:http://localhost:8080}
          predicates:
            - Method=POST
            - Path=/post
          filters:
            - TokenRelay=
            - SaveSession
        - id: frontend
          uri: ${GATEWAY_FRONTEND_URI:http://frontend:4200}
          predicates:
            - Path=/**
          filters:
            - TokenRelay=
            - SaveSession
  data:
    redis:
      host: ${GATEWAY_REDIS_HOST:localhost}
      port: ${GATEWAY_REDIS_PORT:6379}
  session:
    store-type: redis


logging:
  level:
    org.springframework.security: INFO
    org.springframework.cloud.gateway: INFO